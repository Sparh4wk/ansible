---
- name: Ensure volumes to be mounted exist on host
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default(user) }}"
    group: "{{ item.group | default(user) }}"
  with_items:
    - { path: /data/config/aria2 }
    - { path: /data/config/asf }
    #- { path: /data/config/duplicati }
    - { path: /data/config/emby }
    - { path: /data/config/jackett }
    - { path: /data/config/jdownloader2 }
    - { path: /data/config/qbittorrent }
    - { path: /data/config/radarr }
    - { path: /data/config/sonarr }
    - { path: /data/Downloads }
    - { path: /data/kamera }
  loop_control:
    label: "{{ item.path }}"

# Aria2c  
- name: Creating Aria2 container
  docker_container:
    name: aria2
    image: abcminiuser/docker-aria2-with-webui
    volumes:
      - /data/Downloads:/data
      - /data/config/aria2:/config
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 6880:80
      - 6800:6800
    env:
      PUID: "{{ uid }}"
      PGID: "{{ gid }}"
      SECRET: F4ysBecV9Sr5qt5bVxtytehDT7PJ92RHd4u567kkQo9UmBpzQig3HmJvYejiw2A4

# ArchiSteamFarm
- name: Creating ArchiSteamFarm container
  docker_container:
    name: asf
    image: justarchi/archisteamfarm
    user: "{{ uid }}:{{ gid }}"
    volumes:
      - /data/config/asf:/app/config
      - /etc/localtime:/etc/localtime:ro
    restart_policy: on-failure
    state: stopped

# Duplicati
#- name: Creating Duplicati container
#  docker_container:
#    name: duplicati
#    image: linuxserver/duplicati
#    volumes:
#      - /data/config/duplicati:/config
#      - /data:/source
#      - /etc/localtime:/etc/localtime:ro
#    ports:
#      - 8200:8200
#    env:
#      PGID: "{{ gid }}"
#      PUID: "{{ uid }}"

# Emby
- name: Creating Emby container
  docker_container:
    name: emby
    image: emby/embyserver
    restart_policy: always
    devices: 
      - /dev/dri/renderD128
    volumes:
      - /data/config/emby:/config
      - /data:/downloads
    ports:
      - 8096:8096
      - 8920:8920
    env:
      PGID: "{{ gid }}"
      PUID: "{{ uid }}"

# Jackett
- name: Creating Jackett container
  docker_container:
    name: jackett
    image: linuxserver/jackett
    restart_policy: always
    volumes:
      - /data/config/jackett:/config
      - /data/Downloads:/downloads
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 9117:9117
    env:
      PGID: "{{ gid }}"
      PUID: "{{ uid }}"

# JDownloader 2
- name: Creating JDownloader2 container
  docker_container:
    name: jdownloader2
    image: jlesage/jdownloader-2
    volumes:
      - /data/config/jdownloader2:/config
      - /data/Downloads:/output
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 5800:5800
    env:
      USER_ID: "{{ uid }}"
      GROUP_ID: "{{ gid }}"

# QBittorrent
- name: Creating QBittorrent container
  docker_container:
    name: qbittorrent
    image: linuxserver/qbittorrent
    volumes:
      - /data/config/qbittorrent:/config
      - /data/Downloads:/downloads
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 8080:8080
    env:
      PGID: "{{ gid }}"
      PUID: "{{ uid }}"

# Radarr
- name: Creating Radarr container
  docker_container:
    name: radarr
    image: linuxserver/radarr
    volumes:
      - /data/config/radarr:/config
      - /data/Downloads:/downloads
      - /etc/localtime:/etc/localtime:ro
      - /data/Movies:/movies
    ports:
      - 7878:7878
    env:
      PGID: "{{ gid }}"
      PUID: "{{ uid }}"

# Samba
- name: Creating Samba container
  docker_container:
    name: samba
    image: dperson/samba
    volumes:
      - /data:/share/
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 139:139
      - 445:445
    env:
      USERID: "{{ uid }}"
      GROUPID: "{{ gid }}"
    command:
      - -s "data;/share;yes;no;yes"
      - -g "hosts allow = 192.168.1."
      - -g "acl allow execute always = yes"

# Seafile
- name: Creating Seafile container
  docker_container:
    name: seafile
    image: seafileltd/seafile:latest
    restart_policy: always
    volumes:
      - /data/seafile:/shared
      - /data/config/seafile:/shared/seafile/conf
    ports:
      - 8000:80
      - 443:443
    env:
      SEAFILE_ADMIN_EMAIL: sp4rh4wk@gmail.com
      SEAFILE_ADMIN_PASSWORD: Nede.230le

# Sonarr
- name: Creating Sonarr container
  docker_container:
    name: sonarr
    image: linuxserver/sonarr
    volumes:
      - /data/config/sonarr:/config
      - /data/Downloads:/downloads
      - /etc/localtime:/etc/localtime:ro
      - /data/TV:/tv
    ports:
      - 8989:8989
    env:
      PGID: "{{ gid }}"
      PUID: "{{ uid }}"

# Syncthing
#- name: Creating Syncthing container
#  docker_container:
#    name: syncthing
#    image: linuxserver/syncthing
#    volumes:
#      - /data/config/syncthing:/config
#      - /data/syncthing:/data
#      - /etc/localtime:/etc/localtime:ro
#    network_mode: host
#    env:
#      PGID: "{{ gid }}"
#      PUID: "{{ uid }}"

# Kamera
- name: Creating Kamera container
  docker_container:
    name: kamera
    image: jrottenberg/ffmpeg
    user: "{{ uid }}:{{ gid }}"
    volumes:
      - /data/kamera:/output
      - /etc/localtime:/etc/localtime:ro
    command:
      - -loglevel error
      - -rtsp_transport tcp
      - -i rtsp://sparhawk:Nede230le@192.168.1.64:554/Streaming/Channels/1
      - -c copy
      - -segment_time 3600
      - -segment_atclocktime 1
      - -strftime 1
      - -f segment /output/%d-%m_%H-%M.ts
